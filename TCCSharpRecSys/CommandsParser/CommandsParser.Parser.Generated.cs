// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  LUIS-PC
// DateTime: 9/13/2016 10:44:54 PM
// UserName: luis
// Input file <CommandsParser\CommandsParser.Language.grammar.y - 9/13/2016 10:44:49 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using TCCSharpRecSys.CommandsParser.Nodes;

namespace TCCSharpRecSys.CommandsParser
{
internal enum Token {error=2,EOF=3,INTEGER=4,STR=5,DOUBLE=6,
    BOOL=7,METRIC=8,NEIGHBORHOOD=9,SEMICOLON=10,FOR=11,OCB=12,
    CCB=13,OSB=14,CSB=15,OP=16,CP=17,RANGE=18,
    COMMA=19,TRAIN=20,CLASSIFY=21,RECOMMEND=22,USERPROFILES=23,SETDIR=24,
    ATTRCOUNT=25,BEGIN=26,SOM=27,LRATE=28,KMEANS=29,CMEANS=30,
    BOLTZMAN=31};

internal partial struct ValueType
{ 
			public int n; 
			public string s;
      public double p;
      public bool b;
      public Script script;
      public IList<IStmt> stmtList;
      public IStmt stmt;
      public IAlgorithm alg;
      public SOM som;
      public KMeans kMeans;
      public CMeans cMeans;
      public Boltzman boltzman;
      public Neighborhood neighborhood;
      public LRate lRate;
	   }
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class CommandsParserParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[24];
  private static State[] states = new State[66];
  private static string[] nonTerms = new string[] {
      "main", "stmt_list", "stmt", "algorithm", "som", "kmeans", "cmeans", "boltzman", 
      "neighborhood", "lrate", "$accept", };

  static CommandsParserParser() {
    states[0] = new State(new int[]{26,3},new int[]{-1,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{12,4});
    states[4] = new State(new int[]{20,9,21,41,22,44,23,47,24,50,25,53,11,56},new int[]{-2,5,-3,64});
    states[5] = new State(new int[]{13,6,20,9,21,41,22,44,23,47,24,50,25,53,11,56},new int[]{-3,7});
    states[6] = new State(-2);
    states[7] = new State(new int[]{10,8});
    states[8] = new State(-3);
    states[9] = new State(new int[]{27,13,29,34,30,37,10,-23},new int[]{-4,10,-5,12,-6,33,-7,36,-8,40});
    states[10] = new State(new int[]{10,11});
    states[11] = new State(-5);
    states[12] = new State(-12);
    states[13] = new State(new int[]{4,14});
    states[14] = new State(new int[]{4,15});
    states[15] = new State(new int[]{8,16});
    states[16] = new State(new int[]{9,26},new int[]{-9,17});
    states[17] = new State(new int[]{28,20},new int[]{-10,18});
    states[18] = new State(new int[]{7,19});
    states[19] = new State(-16);
    states[20] = new State(new int[]{16,21,7,-20});
    states[21] = new State(new int[]{6,22});
    states[22] = new State(new int[]{19,23});
    states[23] = new State(new int[]{6,24});
    states[24] = new State(new int[]{17,25});
    states[25] = new State(-19);
    states[26] = new State(new int[]{16,27});
    states[27] = new State(new int[]{6,28});
    states[28] = new State(new int[]{19,29,17,32});
    states[29] = new State(new int[]{6,30});
    states[30] = new State(new int[]{17,31});
    states[31] = new State(-17);
    states[32] = new State(-18);
    states[33] = new State(-13);
    states[34] = new State(new int[]{4,35});
    states[35] = new State(-21);
    states[36] = new State(-14);
    states[37] = new State(new int[]{4,38});
    states[38] = new State(new int[]{6,39});
    states[39] = new State(-22);
    states[40] = new State(-15);
    states[41] = new State(new int[]{27,13,29,34,30,37,10,-23},new int[]{-4,42,-5,12,-6,33,-7,36,-8,40});
    states[42] = new State(new int[]{10,43});
    states[43] = new State(-6);
    states[44] = new State(new int[]{27,13,29,34,30,37,10,-23},new int[]{-4,45,-5,12,-6,33,-7,36,-8,40});
    states[45] = new State(new int[]{10,46});
    states[46] = new State(-7);
    states[47] = new State(new int[]{6,48});
    states[48] = new State(new int[]{10,49});
    states[49] = new State(-8);
    states[50] = new State(new int[]{5,51});
    states[51] = new State(new int[]{10,52});
    states[52] = new State(-9);
    states[53] = new State(new int[]{4,54});
    states[54] = new State(new int[]{10,55});
    states[55] = new State(-10);
    states[56] = new State(new int[]{14,57});
    states[57] = new State(new int[]{4,58});
    states[58] = new State(new int[]{18,59});
    states[59] = new State(new int[]{4,60});
    states[60] = new State(new int[]{15,61});
    states[61] = new State(new int[]{20,9,21,41,22,44,23,47,24,50,25,53,11,56},new int[]{-2,62,-3,64});
    states[62] = new State(new int[]{13,63,20,9,21,41,22,44,23,47,24,50,25,53,11,56},new int[]{-3,7});
    states[63] = new State(-11);
    states[64] = new State(new int[]{10,65});
    states[65] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-11, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{26,12,-2,13});
    rules[3] = new Rule(-2, new int[]{-2,-3,10});
    rules[4] = new Rule(-2, new int[]{-3,10});
    rules[5] = new Rule(-3, new int[]{20,-4,10});
    rules[6] = new Rule(-3, new int[]{21,-4,10});
    rules[7] = new Rule(-3, new int[]{22,-4,10});
    rules[8] = new Rule(-3, new int[]{23,6,10});
    rules[9] = new Rule(-3, new int[]{24,5,10});
    rules[10] = new Rule(-3, new int[]{25,4,10});
    rules[11] = new Rule(-3, new int[]{11,14,4,18,4,15,-2,13});
    rules[12] = new Rule(-4, new int[]{-5});
    rules[13] = new Rule(-4, new int[]{-6});
    rules[14] = new Rule(-4, new int[]{-7});
    rules[15] = new Rule(-4, new int[]{-8});
    rules[16] = new Rule(-5, new int[]{27,4,4,8,-9,-10,7});
    rules[17] = new Rule(-9, new int[]{9,16,6,19,6,17});
    rules[18] = new Rule(-9, new int[]{9,16,6,17});
    rules[19] = new Rule(-10, new int[]{28,16,6,19,6,17});
    rules[20] = new Rule(-10, new int[]{28});
    rules[21] = new Rule(-6, new int[]{29,4});
    rules[22] = new Rule(-7, new int[]{30,4,6});
    rules[23] = new Rule(-8, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // main -> BEGIN, OCB, stmt_list, CCB
{ CurrentSemanticValue.script = new Script(); 
                                                                                    CurrentSemanticValue.script.commands = ValueStack[ValueStack.Depth-2].stmtList;                 }
        break;
      case 3: // stmt_list -> stmt_list, stmt, SEMICOLON
{ ValueStack[ValueStack.Depth-3].stmtList.Add(ValueStack[ValueStack.Depth-2].stmt);                       }
        break;
      case 4: // stmt_list -> stmt, SEMICOLON
{ CurrentSemanticValue.stmtList = new List<IStmt>();
                                                                                    CurrentSemanticValue.stmtList.Add(ValueStack[ValueStack.Depth-2].stmt);                       }
        break;
      case 5: // stmt -> TRAIN, algorithm, SEMICOLON
{ CurrentSemanticValue.stmt = new Train(ValueStack[ValueStack.Depth-2].alg);                }
        break;
      case 6: // stmt -> CLASSIFY, algorithm, SEMICOLON
{ CurrentSemanticValue.stmt = new Classify(ValueStack[ValueStack.Depth-2].alg);             }
        break;
      case 7: // stmt -> RECOMMEND, algorithm, SEMICOLON
{ CurrentSemanticValue.stmt = new Recommend(ValueStack[ValueStack.Depth-2].alg);            }
        break;
      case 8: // stmt -> USERPROFILES, DOUBLE, SEMICOLON
{ CurrentSemanticValue.stmt = new BuildUserProfile(ValueStack[ValueStack.Depth-2].p);     }
        break;
      case 9: // stmt -> SETDIR, STR, SEMICOLON
{ CurrentSemanticValue.stmt = new SetDir(ValueStack[ValueStack.Depth-2].s);               }
        break;
      case 10: // stmt -> ATTRCOUNT, INTEGER, SEMICOLON
{ CurrentSemanticValue.stmt = new AttrCount(ValueStack[ValueStack.Depth-2].n);            }
        break;
      case 11: // stmt -> FOR, OSB, INTEGER, RANGE, INTEGER, CSB, stmt_list, CCB
{ CurrentSemanticValue.stmt = new For(ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].stmtList);          }
        break;
      case 12: // algorithm -> som
{ CurrentSemanticValue.alg = ValueStack[ValueStack.Depth-1].som; }
        break;
      case 13: // algorithm -> kmeans
{ CurrentSemanticValue.alg = ValueStack[ValueStack.Depth-1].kMeans; }
        break;
      case 14: // algorithm -> cmeans
{ CurrentSemanticValue.alg = ValueStack[ValueStack.Depth-1].cMeans; }
        break;
      case 15: // algorithm -> boltzman
{ CurrentSemanticValue.alg = ValueStack[ValueStack.Depth-1].boltzman; }
        break;
      case 16: // som -> SOM, INTEGER, INTEGER, METRIC, neighborhood, lrate, BOOL
{ CurrentSemanticValue.som = new SOM(ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-5].n, new Metric(ValueStack[ValueStack.Depth-4].s), ValueStack[ValueStack.Depth-3].neighborhood, ValueStack[ValueStack.Depth-2].lRate, ValueStack[ValueStack.Depth-1].b); }
        break;
      case 17: // neighborhood -> NEIGHBORHOOD, OP, DOUBLE, COMMA, DOUBLE, CP
{ CurrentSemanticValue.neighborhood = new Neighborhood(ValueStack[ValueStack.Depth-6].s, ValueStack[ValueStack.Depth-4].p, ValueStack[ValueStack.Depth-2].p); }
        break;
      case 18: // neighborhood -> NEIGHBORHOOD, OP, DOUBLE, CP
{ CurrentSemanticValue.neighborhood = new Neighborhood(ValueStack[ValueStack.Depth-4].s, ValueStack[ValueStack.Depth-2].p); }
        break;
      case 19: // lrate -> LRATE, OP, DOUBLE, COMMA, DOUBLE, CP
{ CurrentSemanticValue.lRate = new LRate(ValueStack[ValueStack.Depth-4].p, ValueStack[ValueStack.Depth-2].p); }
        break;
      case 20: // lrate -> LRATE
{ CurrentSemanticValue.lRate = new LRate(); }
        break;
      case 21: // kmeans -> KMEANS, INTEGER
{ CurrentSemanticValue.kMeans = new KMeans(ValueStack[ValueStack.Depth-1].n); }
        break;
      case 22: // cmeans -> CMEANS, INTEGER, DOUBLE
{ CurrentSemanticValue.cMeans = new CMeans(ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].p); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
